# INTRODUCTION TO ORM's IN PYTHON 

	1. SQLAlchemy is more full-featured and powerful (uses the DataMapper pattern).
	2. Django ORM has a cleaner syntax and is easier to write for (ActiveRecord pattern).
	3. If you're looking for lightweight and are already familiar with django-style declarative models, check out peewee:


 Django is a full-stack web framework for Python, whereas Flask is a lightweight and extensible Python web framework.
 Django is developed based on batteries-included approach. It enables programmers to accomplish common web development tasks without using third-party tools and libraries. Django lacks some of the robust features provided by Python.
 
 
# FOR CREATING VIRTUAL ENVIRONMENT IN PYTHON
 
pip install virtualenvwrapper-win
mkvirtualenv testdjango

# USING VIRTUAL ENVIRONMENT
workon testdjango


pip install django

# CREATING PROJECTS WHICH CONTAIN MULTIPLE APPS

(testdjango) C:\Users\kaush\Documents\New folder\New folder\DjangoProject>django-admin startproject djangoWebProject

# START APP
python manage.py startapp accounts


Django -- lightweight server

# START SERVER
python manage.py runserver

# CREATE APP
python manage.py travello

python manage.py collectstatic

Collect static files from multiple apps into a single path
Well, a single Django project may use several apps, so while there you only have one myapp, it may actually be myapp1, myapp2, etc

By copying them from inside the individual apps into a single folder, you can point your frontend web server (e.g. nginx) to that single folder STATIC_ROOT and serve static files from a single location, rather than configure your web server to serve static files from multiple paths.

more about static files  --- https://docs.djangoproject.com/en/3.0/ref/contrib/staticfiles/


# POSTGRE 

'''

We used the pgadmin which provides the UI to check changes in DB. same as xampp for MySQL .

'''

username :: postgres
PASSWORD : root	
port:5432
pip install psycopg2  


#FOR MODEL MIGRATIONS:

python manage.py makemigrations  
python manage.py sqlmigrate travello 0001 # to check the sql query
python manage.py migrate


# REMIGRATION 
python manage.py makemigrations  
python manage.py migrate

# CREATING A SUPER USER :
python manage.py createsuperuser
